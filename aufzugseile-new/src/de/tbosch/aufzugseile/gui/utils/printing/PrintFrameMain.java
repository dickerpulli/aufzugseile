package de.tbosch.aufzugseile.gui.utils.printing;

import de.tbosch.commons.gui.printing.Messages;
import de.tbosch.aufzugseile.gui.MainFrame;
import de.tbosch.aufzugseile.gui.aufzug.Aufzugschacht;
import de.tbosch.aufzugseile.gui.aufzug.AufzugschachtDoppelUmlenkrolle;
import de.tbosch.aufzugseile.gui.aufzug.AufzugschachtTreibscheibe;
import de.tbosch.aufzugseile.gui.aufzug.AufzugschachtUmlenkrolle;
import de.tbosch.aufzugseile.gui.utils.MyToolTip;
import de.tbosch.commons.Helper;
import de.tbosch.seile.commons.CommonConstants;
import de.tbosch.seile.commons.elemente.DoppelUmlenkrolle;
import de.tbosch.seile.commons.elemente.Rolle;
import de.tbosch.seile.commons.elemente.Treibscheibe;
import de.tbosch.seile.commons.elemente.Umlenkrolle;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.util.Vector;

import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RepaintManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import org.jdesktop.swingx.JXTable;



// TODO: Auto-generated Javadoc
/**
 * The Class PrintFrame.
 * 
 * @author Thomas Bosch (tbosch@gmx.de)
 */
public class PrintFrameMain extends JFrame implements Printable {
    
    /** The Logger */
    private static final Logger logger = Logger.getLogger(PrintFrameMain.class.getName());
	
	/** The rollen table. */
	private JTable rollenTable;

	/**
	 * Creates new form PrintFrame.
	 */
	public PrintFrameMain() {
		initComponents();
		setResizable(false);
		setTitle("Preview 1 - DO NOT CLOSE"); //$NON-NLS-1$
		jLabel1.setIcon(new ImageIcon(Helper.getFileURL("images/drako_200.jpg"))); //$NON-NLS-1$
	}

	/* (non-Javadoc)
	 * @see java.awt.print.Printable#print(java.awt.Graphics, java.awt.print.PageFormat, int)
	 */
	public int print(Graphics g, PageFormat pageFormat, int pageIndex) {
		int x = (int)pageFormat.getImageableX() + 1;
		int y = (int)pageFormat.getImageableY() + 1;
		g.translate(x, y);
		RepaintManager currentManager = RepaintManager.currentManager(this);
		currentManager.setDoubleBufferingEnabled(false);
		paint(g);
		currentManager.setDoubleBufferingEnabled(true);
		return (PAGE_EXISTS);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    @SuppressWarnings("serial")
	private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        ooPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bezeichnungLabel = new javax.swing.JLabel();
        mainSplitPane = new javax.swing.JSplitPane();
        oSplitPane = new javax.swing.JSplitPane();
        olPanel = new javax.swing.JPanel();
        orPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        globalTable = new javax.swing.JTable();
        uSplitPane = new javax.swing.JSplitPane();
        uoPanel = new javax.swing.JPanel();
        rollenScrollPane = new javax.swing.JScrollPane();
        uuPanel = new javax.swing.JPanel();
        ergebnisScrollPane = new javax.swing.JScrollPane();
        uuuPanel = new javax.swing.JPanel();
        nutzerLabel = new javax.swing.JLabel();
        dateiLabel = new javax.swing.JLabel();
        datumLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        ooPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Anlagenbezeichnung"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bezeichnungLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(bezeichnungLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 12, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout ooPanelLayout = new javax.swing.GroupLayout(ooPanel);
        ooPanel.setLayout(ooPanelLayout);
        ooPanelLayout.setHorizontalGroup(
            ooPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ooPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1))
        );
        ooPanelLayout.setVerticalGroup(
            ooPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ooPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainSplitPane.setBackground(new java.awt.Color(255, 255, 255));
        mainSplitPane.setBorder(null);
        mainSplitPane.setDividerLocation(480);
        mainSplitPane.setDividerSize(0);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        oSplitPane.setBackground(new java.awt.Color(255, 255, 255));
        oSplitPane.setBorder(null);
        oSplitPane.setDividerLocation(300);
        oSplitPane.setDividerSize(0);

        olPanel.setBackground(new java.awt.Color(255, 255, 255));
        olPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Aufzugsskizze"));
        olPanel.setMinimumSize(new java.awt.Dimension(5, 12));
        olPanel.setLayout(new java.awt.GridLayout(1, 0));
        oSplitPane.setLeftComponent(olPanel);

        orPanel.setBackground(new java.awt.Color(255, 255, 255));
        orPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Globale Parameter"));
        orPanel.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        globalTable.setFont(new java.awt.Font("Dialog", 0, 10));
        globalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Parameter", "Wert"
            }
        ) {
            @SuppressWarnings("unchecked")
			Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            @SuppressWarnings("unchecked")
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(globalTable);

        orPanel.add(jScrollPane1);

        oSplitPane.setRightComponent(orPanel);

        mainSplitPane.setTopComponent(oSplitPane);

        uSplitPane.setBackground(new java.awt.Color(255, 255, 255));
        uSplitPane.setBorder(null);
        uSplitPane.setDividerLocation(110);
        uSplitPane.setDividerSize(0);
        uSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        uoPanel.setBackground(new java.awt.Color(255, 255, 255));
        uoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rollenparameter"));
        uoPanel.setLayout(new java.awt.GridLayout(1, 0));

        rollenScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        uoPanel.add(rollenScrollPane);

        uSplitPane.setTopComponent(uoPanel);

        uuPanel.setBackground(new java.awt.Color(255, 255, 255));
        uuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ergebnisse - Biegewechsel"));
        uuPanel.setLayout(new java.awt.GridLayout(1, 0));

        ergebnisScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        uuPanel.add(ergebnisScrollPane);

        uSplitPane.setRightComponent(uuPanel);

        mainSplitPane.setRightComponent(uSplitPane);

        uuuPanel.setBackground(new java.awt.Color(255, 255, 255));
        uuuPanel.setLayout(new java.awt.GridLayout(1, 0));

        nutzerLabel.setText("<nutzer>");
        uuuPanel.add(nutzerLabel);

        dateiLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateiLabel.setText("<datei>");
        uuuPanel.add(dateiLabel);

        datumLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        datumLabel.setText("<datum>");
        uuuPanel.add(datumLabel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ooPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(uuuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addComponent(mainSplitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(ooPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uuuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Form component resized.
	 * 
	 * @param evt the evt
	 */
	private void formComponentResized(java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_formComponentResized
	// jSplitPane1.setDividerLocation(0.08);
	// jSplitPane2.setDividerLocation(0.7);
	// jSplitPane3.setDividerLocation(0.7);
	// jSplitPane4.setDividerLocation(0.5);
	}// GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bezeichnungLabel;
    private javax.swing.JLabel dateiLabel;
    private javax.swing.JLabel datumLabel;
    private javax.swing.JScrollPane ergebnisScrollPane;
    private javax.swing.JTable globalTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JLabel nutzerLabel;
    private javax.swing.JSplitPane oSplitPane;
    private javax.swing.JPanel olPanel;
    private javax.swing.JPanel ooPanel;
    private javax.swing.JPanel orPanel;
    private javax.swing.JScrollPane rollenScrollPane;
    private javax.swing.JSplitPane uSplitPane;
    private javax.swing.JPanel uoPanel;
    private javax.swing.JPanel uuPanel;
    private javax.swing.JPanel uuuPanel;
    // End of variables declaration//GEN-END:variables

	/**
     * Gets the upper-left panel.
     * 
     * @return the upper-left panel
     */
    public javax.swing.JPanel getOlPanel() {
		return olPanel;
	}

	/**
	 * Gets the upper-right panel.
	 * 
	 * @return the upper-right panel
	 */
	public javax.swing.JPanel getOrPanel() {
		return orPanel;
	}

	/**
	 * Gets the down-upper panel.
	 * 
	 * @return the down-upper panel
	 */
	public javax.swing.JPanel getUoPanel() {
		return uoPanel;
	}

	/**
	 * Gets the down-down panel.
	 * 
	 * @return the upper-upper panel
	 */
	public javax.swing.JPanel getUuPanel() {
		return uuPanel;
	}

	/**
	 * Insert aufzugschacht.
	 * 
	 * @param aufzugschacht the aufzugschacht
	 * @param mainFrame the main frame
	 */
	public void insertAufzugschacht(Aufzugschacht aufzugschacht, MainFrame mainFrame) {
		Aufzugschacht aschacht = aufzugschacht.clone();
		removeAllMouseListeners(aschacht);
		olPanel.add(aschacht);
		createToolTips(aschacht, aufzugschacht);
		fillGlobalTable(aufzugschacht, mainFrame);
		createAndFillRollenTable(aufzugschacht);
		copyErgebnisTable(mainFrame);
	}
	
	/**
	 * Removes the all mouse listeners from the elevator and all its elements.
	 * 
	 * @param aschacht the evelator
	 */
	private void removeAllMouseListeners(Aufzugschacht aschacht) {
		for (int i = 0; i < aschacht.getMouseListeners().length; i++) {
			aschacht.removeMouseListener(aschacht.getMouseListeners()[i]);
		}
		for (int i = 0; i < aschacht.getMouseMotionListeners().length; i++) {
			aschacht.removeMouseMotionListener(aschacht.getMouseMotionListeners()[i]);
		}
		for (int i = 0; i < aschacht.getComponents().length; i++) {
			Component comp = aschacht.getComponents()[i];
			for (int j = 0; j < comp.getMouseListeners().length; j++) {
				comp.removeMouseListener(comp.getMouseListeners()[j]);
			}
			for (int j = 0; j < comp.getMouseMotionListeners().length; j++) {
				comp.removeMouseMotionListener(comp.getMouseMotionListeners()[j]);
			}
		}
	}
	
	/**
	 * Creates the tool tips for the copied elevator to see the names
	 * of the rolls.
	 * 
	 * @param aschacht the copied elevator
	 * @param aufzugschacht the original elevator
	 */
	private void createToolTips(Aufzugschacht aschacht, Aufzugschacht aufzugschacht) {
		if (aufzugschacht.getTreibscheibe() != null) {
			Treibscheibe tr = aufzugschacht.getTreibscheibe();
			MyToolTip treibscheibeToolTip = new MyToolTip(aschacht);
			String name = tr.getName() + tr.getID();
			if (tr.isDoppelteUmschlingung()) name += tr.getRolle2teUmschlingung().getName()+tr.getRolle2teUmschlingung().getID();
			treibscheibeToolTip.setElement((AufzugschachtTreibscheibe)aschacht.getTreibscheibe(), name);
			aschacht.add(treibscheibeToolTip);
		}		
		for (int i = 0; i < aufzugschacht.getUmlenkrollenVector().size(); i++) {
			AufzugschachtUmlenkrolle rolle = (AufzugschachtUmlenkrolle)aufzugschacht.getUmlenkrollenVector().get(i);
			MyToolTip rolleToolTip = new MyToolTip(aschacht);
			rolleToolTip.setElement((AufzugschachtUmlenkrolle)aschacht.getUmlenkrollenVector().get(i), rolle.getToolTipText());
			// only tooltip for activated rolls
			if (rolle.isActivated()) aschacht.add(rolleToolTip);
		}
		if (aufzugschacht.getKabinenRolle() != null) {
			Umlenkrolle rolle = aufzugschacht.getKabinenRolle();
			MyToolTip treibscheibeToolTip = new MyToolTip(aschacht);
			treibscheibeToolTip.setElement((AufzugschachtUmlenkrolle)aschacht.getKabinenRolle(), rolle.getName() + rolle.getID());
			aschacht.add(treibscheibeToolTip);
		}
		if (aufzugschacht.getGewichtsRolle() != null) {
			Umlenkrolle rolle = aufzugschacht.getGewichtsRolle();
			MyToolTip treibscheibeToolTip = new MyToolTip(aschacht);
			treibscheibeToolTip.setElement((AufzugschachtUmlenkrolle)aschacht.getGewichtsRolle(), rolle.getName() + rolle.getID());
			aschacht.add(treibscheibeToolTip);
		}
		if (aufzugschacht.getKabinenDoppelRolle() != null) {
			AufzugschachtDoppelUmlenkrolle rolle = (AufzugschachtDoppelUmlenkrolle)aufzugschacht.getKabinenDoppelRolle();
			MyToolTip treibscheibeToolTip = new MyToolTip(aschacht);
			treibscheibeToolTip.setElement((AufzugschachtDoppelUmlenkrolle)aschacht.getKabinenDoppelRolle(), rolle.getToolTipText());
			aschacht.add(treibscheibeToolTip);
		}
		
		aschacht.repaint();
	}
	
	/**
	 * Copy the solution table from the main frame to the print frame.
	 * 
	 * @param mainFrame the main frame
	 */
	private void copyErgebnisTable(MainFrame mainFrame) {
		if (mainFrame.getErgebnisTable() != null) {
			JXTable ergebnisTable = createTable(mainFrame);
			if (ergebnisTable.getColumnCount() >= 1) { 
				ergebnisTable.getColumnExt(0).setTitle(Messages.getString("PrintFrameMain.76")); //$NON-NLS-1$
			}
			ergebnisTable.setSortable(false);
			ergebnisTable.setEditable(false);
			
			ergebnisTable.getTableHeader().setFont(new java.awt.Font("Dialog", 0, 10)); //$NON-NLS-1$
			ergebnisTable.setFont(new java.awt.Font("Dialog", 0, 10));	 //$NON-NLS-1$
			ergebnisTable.setRowHeight(12);
			ergebnisTable.getColumnModel().getColumn(0).setPreferredWidth(85);
			ergebnisTable.getColumnModel().getColumn(0).setMaxWidth(85);
			ergebnisTable.getColumnModel().getColumn(0).setMinWidth(85);
			for (int i = 1; i < ergebnisTable.getColumnCount(); i++) {
				ergebnisTable.getColumnModel().getColumn(i).setPreferredWidth(80);
				ergebnisTable.getColumnModel().getColumn(i).setMaxWidth(80);
				ergebnisTable.getColumnModel().getColumn(i).setMinWidth(80);
			}
			
	        DefaultTableCellRenderer tableCellRendererAlignRight = new DefaultTableCellRenderer();
	        tableCellRendererAlignRight.setHorizontalAlignment(JLabel.RIGHT);
	        ergebnisTable.getColumnModel().getColumn(0).setCellRenderer(tableCellRendererAlignRight);  
			ergebnisScrollPane.setViewportView(ergebnisTable);
		}
	}
	
	/**
	 * Creates the ergebnis table.
	 * 
	 * @param mainFrame the main frame
	 * 
	 * @return the JX table
	 */
	private JXTable createTable(MainFrame mainFrame) {
		DefaultTableModel oldTableModel = (DefaultTableModel)mainFrame.getErgebnisTable().getModel();
		JTable oldTable = new JTable(oldTableModel);
			
		Object[][] objects = new Object[oldTableModel.getRowCount()][oldTableModel.getColumnCount()];
		Object[] colnames = new Object[oldTableModel.getColumnCount()];
		for (int r = 0; r < oldTable.getRowCount()+1; r++) {
			for (int s = 0; s < oldTable.getColumnCount(); s++) {
				if (r == 0) {
					colnames[s] = oldTable.getColumnName(s);
				}
				else {
					if (s == 0) {
						if (r == 1) objects[r-1][s] = "N A"; //$NON-NLS-1$
						if (r == 2) objects[r-1][s] = "N A10"; //$NON-NLS-1$
						if (r == 3) objects[r-1][s] = Messages.getString("PrintFrameMain.77"); //$NON-NLS-1$
					}
					else objects[r-1][s] = oldTable.getValueAt(r-1, s);
				}
			}
		}
		
		// reset ergebnis table
		for (int i = oldTableModel.getRowCount() - 1; i >= 0; i--) {
			oldTableModel.removeRow(i);
		}
		
		DefaultTableModel ergebnisTableModel = new DefaultTableModel(objects, colnames); 
		
		JXTable ergebnisTable = new JXTable(ergebnisTableModel);
		
		return ergebnisTable;
	}
	
	/**
	 * Creates the and fills the parameter table for all rolls in the elevator.
	 * 
	 * @param aufzugschacht the elevator
	 */
	@SuppressWarnings({ "serial", "unchecked" }) //$NON-NLS-1$ //$NON-NLS-2$
	private void createAndFillRollenTable(Aufzugschacht aufzugschacht) {
		Vector<String> nameVector = new Vector<String>();
		Vector<Class> typeVector = new Vector<Class>();
		Vector<Boolean> editVector = new Vector<Boolean>();
		nameVector.add(Messages.getString("PrintFrameMain.21")); //$NON-NLS-1$
		typeVector.add(String.class);
		editVector.add(false);
		Vector<Rolle> alreadyListed = new Vector<Rolle>();
		if (aufzugschacht.getSeil() != null) {
			for (int i = 0; i < aufzugschacht.getSeil().getElementVector().size(); i++) {
				if (aufzugschacht.getSeil().getElementVector().get(i) instanceof Umlenkrolle
						&& ((Umlenkrolle)aufzugschacht.getSeil().getElementVector().get(i)).isActivated()) {
					Rolle rolle = (Rolle)aufzugschacht.getSeil().getElementVector().get(i);
					if (alreadyListed.contains(rolle)) {
						logger.fine(rolle.getName()+rolle.getID()+" already listed. Seems do be a roll with a double enlancement."); //$NON-NLS-1$
						rolle = rolle.getRolle2teUmschlingung();
					}
					nameVector.add(rolle.getName()+rolle.getID());
					typeVector.add(String.class);
					editVector.add(false);
					alreadyListed.add(rolle);
				}
				if (aufzugschacht.getSeil().getElementVector().get(i) instanceof DoppelUmlenkrolle) {
					DoppelUmlenkrolle doppelRolle = (DoppelUmlenkrolle)aufzugschacht.getSeil().getElementVector().get(i);
					if (alreadyListed.contains(doppelRolle.getRolle1())) {
						logger.severe(doppelRolle.getRolle1().getName()+" already listed. Should not be!"); //$NON-NLS-1$
					}
					if (alreadyListed.contains(doppelRolle.getRolle2())) {
						logger.severe(doppelRolle.getRolle2().getName()+" already listed. Should not be!"); //$NON-NLS-1$
					}
					nameVector.add(doppelRolle.getRolle1().getName()+doppelRolle.getRolle1().getID());
					typeVector.add(String.class);
					editVector.add(false);
					alreadyListed.add(doppelRolle.getRolle1());
					nameVector.add(doppelRolle.getRolle2().getName()+doppelRolle.getRolle2().getID());
					typeVector.add(String.class);
					editVector.add(false);
					alreadyListed.add(doppelRolle.getRolle2());
				}
			}
			alreadyListed.clear();
		}
		String nameArray[] = new String[nameVector.size()];
		nameVector.copyInto(nameArray);
		final Class typeArray[] = new Class[typeVector.size()];
		typeVector.copyInto(typeArray);
		final Boolean editArray[] = new Boolean[editVector.size()];
		editVector.copyInto(editArray);
		rollenTable = new JTable();
		rollenTable.getTableHeader().setFont(new java.awt.Font("Dialog", 0, 10)); //$NON-NLS-1$
        rollenTable.setFont(new java.awt.Font("Dialog", 0, 10)); //$NON-NLS-1$
        rollenTable.setRowHeight(12);
		rollenTable.setModel(new DefaultTableModel(null, nameArray) {
			@SuppressWarnings("unchecked") //$NON-NLS-1$
			Class[] types = typeArray;

			Boolean[] canEdit = editArray;

			@SuppressWarnings("unchecked") //$NON-NLS-1$
            @Override
			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

            @Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		rollenTable.getColumnModel().getColumn(0).setPreferredWidth(95);
		rollenTable.getColumnModel().getColumn(0).setMaxWidth(95);
		rollenTable.getColumnModel().getColumn(0).setMinWidth(95);
        DefaultTableCellRenderer tableCellRendererAlignRight = new DefaultTableCellRenderer();
        tableCellRendererAlignRight.setHorizontalAlignment(JLabel.RIGHT);
        rollenTable.getColumnModel().getColumn(0).setCellRenderer(tableCellRendererAlignRight);  
		rollenScrollPane.setViewportView(rollenTable);
		DefaultTableModel rollenTableModel = (DefaultTableModel)rollenTable.getModel();
		
		for (int r = 0; r < 5; r++) {
			Vector<Object> rowData = new Vector<Object>();
			if (r == 0) rowData.add(Messages.getString("PrintFrameMain.29")); //$NON-NLS-1$
			if (r == 1) rowData.add("fs2"); //$NON-NLS-1$
			if (r == 2) rowData.add("fn3"); //$NON-NLS-1$
			if (r == 3) rowData.add("fn4"); //$NON-NLS-1$
			if (r == 4) rowData.add(Messages.getString("PrintFrameMain.33")); //$NON-NLS-1$
			if (aufzugschacht.getSeil() != null) {
				for (int i = 0; i < aufzugschacht.getSeil().getElementVector().size(); i++) {
					if (aufzugschacht.getSeil().getElementVector().get(i) instanceof Umlenkrolle) {
						Rolle rolle = (Rolle)aufzugschacht.getSeil().getElementVector().get(i);
						if (alreadyListed.contains(rolle)) {
							logger.fine(rolle.getName()+rolle.getID()+" already listed. Seems do be a roll with a double enlancement."); //$NON-NLS-1$
							rolle = rolle.getRolle2teUmschlingung();
						}
						if (r == 0) rowData.add(rolle.getDurchmesser());
						if (r == 1) rowData.add(rolle.getFs2());
						if (r == 2) rowData.add(rolle.getFn3());
						if (r == 3) rowData.add(rolle.getFn4());
						if (r == 4) rowData.add(rolle.isGegenbiegung());
						alreadyListed.add(rolle);
					}
					if (aufzugschacht.getSeil().getElementVector().get(i) instanceof DoppelUmlenkrolle) {
						DoppelUmlenkrolle rolle = (DoppelUmlenkrolle)aufzugschacht.getSeil().getElementVector().get(i);
						if (alreadyListed.contains(rolle.getRolle1())) {
							logger.severe(rolle.getRolle1().getName()+" already listed. Should not be!"); //$NON-NLS-1$
						}
						if (alreadyListed.contains(rolle.getRolle2())) {
							logger.severe(rolle.getRolle2().getName()+" already listed. Should not be!"); //$NON-NLS-1$
						}
						if (r == 0) rowData.add(rolle.getRolle1().getDurchmesser());
						if (r == 1) rowData.add(rolle.getRolle1().getFs2());
						if (r == 2) rowData.add(rolle.getRolle1().getFn3());
						if (r == 3) rowData.add(rolle.getRolle1().getFn4());
						if (r == 4) rowData.add(rolle.getRolle1().isGegenbiegung());
						alreadyListed.add(rolle.getRolle1());
						if (r == 0) rowData.add(rolle.getRolle2().getDurchmesser());
						if (r == 1) rowData.add(rolle.getRolle2().getFs2());
						if (r == 2) rowData.add(rolle.getRolle2().getFn3());
						if (r == 3) rowData.add(rolle.getRolle2().getFn4());
						if (r == 4) rowData.add(rolle.getRolle2().isGegenbiegung());
						alreadyListed.add(rolle.getRolle2());
					}	
				}
				alreadyListed.clear();
			}
			rollenTableModel.addRow(rowData);
		}
		for (int i = 1; i < rollenTableModel.getColumnCount(); i++) {
			rollenTable.getColumnModel().getColumn(i).setPreferredWidth(36);
			rollenTable.getColumnModel().getColumn(i).setMaxWidth(36);
			rollenTable.getColumnModel().getColumn(i).setMinWidth(36);
		}
	}

	/**
	 * Fills the global parameters table.
	 * 
	 * @param aufzugschacht the evelavtor
	 * @param mainFrame the main frame
	 */
	private void fillGlobalTable(Aufzugschacht aufzugschacht, MainFrame mainFrame) {
		// first do some formatting
        globalTable.getTableHeader().setFont(new java.awt.Font("Dialog", 0, 10)); //$NON-NLS-1$
        globalTable.getColumnModel().getColumn(0).setPreferredWidth(155);
        globalTable.getColumnModel().getColumn(0).setMaxWidth(155);
        globalTable.getColumnModel().getColumn(0).setMinWidth(155);
        //DefaultTableCellRenderer tableCellRendererAlignRight = new DefaultTableCellRenderer();
        //tableCellRendererAlignRight.setHorizontalAlignment(JLabel.RIGHT);
        //globalTable.getColumnModel().getColumn(0).setCellRenderer(tableCellRendererAlignRight);       
        
        globalTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        globalTable.getColumnModel().getColumn(1).setMaxWidth(50);
        globalTable.getColumnModel().getColumn(1).setMinWidth(50);
        
        globalTable.setRowHeight(12);
        
		// then fill the table
		int z = 0;
		if (aufzugschacht.getKabine() != null) {
			globalTable.setValueAt(Messages.getString("PrintFrameMain.38"), z, 0);  //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.39"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getKabine().getMass(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.40"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getKabine().getZuladung(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.41"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt((int)(aufzugschacht.getKabine().getDurchschnitt()*100), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.42"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt((int)(aufzugschacht.getKabine().getProfil()*100), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.54"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt((int)(mainFrame.getBerechnung().getToleranz()*100), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.1"), z, 0); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
			globalTable.setValueAt(aufzugschacht.getHoehe(), z, 1);
			z++;
		}			
		if (aufzugschacht.getGewicht() != null) {
			globalTable.setValueAt(Messages.getString("PrintFrameMain.2"), z, 0); //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.47"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt((int)(aufzugschacht.getGewicht().getPart()*100), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.48"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getGewicht().getMass(), z, 1);
			z++;
		}			
		if (mainFrame.getBerechnung().getFs1() != 0) {
			globalTable.setValueAt(Messages.getString("PrintFrameMain.3"), z, 0); //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.78"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(mainFrame.getBerechnung().getFs1(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.80"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(mainFrame.getBerechnung().getFs3(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.81"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(mainFrame.getBerechnung().getFs4(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.82"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(mainFrame.getBerechnung().getFn1(), z, 1);
			z++;
		}			
		if (aufzugschacht.getSeil() != null) {
			globalTable.setValueAt(Messages.getString("PrintFrameMain.55"), z, 0); //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.57"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getSeil().getCount(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.0"), z, 0); //$NON-NLS-1$ //$NON-NLS-2$
			globalTable.setValueAt(aufzugschacht.getAufhaengung()+":1", z, 1); //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.56"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getSeil().getD(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.75"), z, 0); //$NON-NLS-1$ //$NON-NLS-2$
			globalTable.setValueAt(aufzugschacht.getSeil().getL(), z, 1);
			z++;
		}			
		if (aufzugschacht.getTreibscheibe() != null) {
			globalTable.setValueAt(Messages.getString("PrintFrameMain.63"), z, 0); //$NON-NLS-1$
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.64"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getTreibscheibe().getDurchmesser(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.79"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getTreibscheibe().getFs2(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.83"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getTreibscheibe().getFn3(), z, 1);
			z++;
			if (aufzugschacht.getTreibscheibe().getForm().equals(Rolle.FORM_SITZ)) {
				globalTable.setValueAt(Messages.getString("PrintFrameMain.85"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getUnterschnittwinkel(), z, 1); 
				z++;
			}
			else if (aufzugschacht.getTreibscheibe().getForm().equals(Rolle.FORM_KEIL) 
					&& aufzugschacht.getTreibscheibe().getUnterschnittwinkel() != 0) {
				globalTable.setValueAt(Messages.getString("PrintFrameMain.85"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getUnterschnittwinkel(), z, 1);
				z++;
				globalTable.setValueAt(Messages.getString("PrintFrameMain.86"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getKeilwinkel(), z, 1);
				z++;
			}
			globalTable.setValueAt(Messages.getString("PrintFrameMain.84"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getTreibscheibe().getFn4(), z, 1);
			z++;
			globalTable.setValueAt(Messages.getString("PrintFrameMain.68"), z, 0); //$NON-NLS-1$
			globalTable.setValueAt(aufzugschacht.getTreibscheibe().isGegenbiegung(), z, 1);
			z++;
			if (aufzugschacht.getTreibscheibe().getRolle2teUmschlingung() != null) {
				globalTable.setValueAt(Messages.getString("PrintFrameMain.69"), z, 0); //$NON-NLS-1$
				z++;
				globalTable.setValueAt(Messages.getString("PrintFrameMain.70"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getDurchmesser(), z, 1);
				z++;
				globalTable.setValueAt(Messages.getString("PrintFrameMain.79"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getFs2(), z, 1);
				z++;
				globalTable.setValueAt(Messages.getString("PrintFrameMain.83"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getFn3(), z, 1);
				z++;
				if (aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getForm().equals(Rolle.FORM_SITZ)) {
					globalTable.setValueAt(Messages.getString("PrintFrameMain.85"), z, 0); //$NON-NLS-1$
					globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getUnterschnittwinkel(), z, 1); 
					z++;
				}
				else if (aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getForm().equals(Rolle.FORM_KEIL)
						&& aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getUnterschnittwinkel() != 0) {
					globalTable.setValueAt(Messages.getString("PrintFrameMain.85"), z, 0); //$NON-NLS-1$
					globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getUnterschnittwinkel(), z, 1);
					z++;
					globalTable.setValueAt(Messages.getString("PrintFrameMain.86"), z, 0); //$NON-NLS-1$
					globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getKeilwinkel(), z, 1);
					z++;
				}
				globalTable.setValueAt(Messages.getString("PrintFrameMain.84"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().getFn4(), z, 1);
				z++;
				globalTable.setValueAt(Messages.getString("PrintFrameMain.74"), z, 0); //$NON-NLS-1$
				globalTable.setValueAt(aufzugschacht.getTreibscheibe().getRolle2teUmschlingung().isGegenbiegung(), z, 1);
				z++;
			}
		}
	}

	public javax.swing.JSplitPane getMainSplitPane() {
		return mainSplitPane;
	}

	public javax.swing.JSplitPane getOSplitPane() {
		return oSplitPane;
	}

	public javax.swing.JSplitPane getUSplitPane() {
		return uSplitPane;
	}

	public javax.swing.JLabel getBezeichnungLabel() {
		return bezeichnungLabel;
	}

	public javax.swing.JLabel getDateiLabel() {
		return dateiLabel;
	}

	public javax.swing.JLabel getDatumLabel() {
		return datumLabel;
	}

	public javax.swing.JLabel getNutzerLabel() {
		return nutzerLabel;
	}
}
