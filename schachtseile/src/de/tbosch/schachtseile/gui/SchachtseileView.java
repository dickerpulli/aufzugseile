/*
 * SchachtseileView.java
 */
package de.tbosch.schachtseile.gui;

import de.tbosch.commons.LongGrouping;
import de.tbosch.commons.gui.LogViewDialog;
import de.tbosch.commons.gui.QuestionDialog;
import de.tbosch.commons.gui.Reactor;
import de.tbosch.schachtseile.*;
import de.tbosch.schachtseile.gui.events.FoerderschachtEvent;
import de.tbosch.schachtseile.gui.events.FoerderschachtListener;
import de.tbosch.schachtseile.schacht.Foerderschacht;
import de.tbosch.schachtseile.service.DateiOperationenService;
import de.tbosch.seile.berechnung.lebensdauer.Berechnung;
import de.tbosch.seile.berechnung.lebensdauer.Berechnung.Summenobjekt;
import de.tbosch.seile.commons.CommonConstants;
import de.tbosch.seile.commons.elemente.Kapsel;
import de.tbosch.seile.commons.elemente.Seil;
import de.tbosch.seile.commons.gui.SeilParameterDialog;
import de.tbosch.seile.commons.gui.util.SeilparameterUtilities;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.EventObject;
import java.util.Vector;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.log4j.Logger;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 * The application's main frame.
 */
public class SchachtseileView extends FrameView implements Reactor {

	private static final String REACT_ID_SPEICHERN_VOR_NEU = "1";
	private static final String REACT_ID_SPEICHERN_VOR_BEENDEN = "2";
	private static final String REACT_ID_SPEICHERN_VOR_OEFFNEN = "3";
	private static final Logger logger = Logger.getLogger(SchachtseileView.class.getName());
	
	private JDialog aboutBox;
	private JDialog neuDialog;
	private JDialog speichernDialog;
	
	private ResourceMap resourceMap = Application.getInstance(SchachtseileApp.class).getContext().getResourceMap(SchachtseileView.class);
	
	private boolean exitErlaubt = false;
	
	private JFrame mainFrame;
	private File seilparameterDatei;
	private DateiOperationenService dateiOperationenService = new DateiOperationenService(mainFrame);

	/**
	 * Der Kontruktor des Haupt-View
	 * 
	 * @param app Die Haupt Applikation
	 */
	public SchachtseileView(SingleFrameApplication app) {
		super(app);
		initComponents();
		mainFrame = getFrame();
		logger.info("View erstellt.");
	}
	
	/**
	 * Initialisiere den Haupt-Frame
	 */
	public void init() {
		logger.info("Initialisiere das Haupt-Fenster.");
		
		// Größe und Position auf dem Desktop
		int breite = 1100;
		int hoehe = 900;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		if (screenSize.width <= breite || screenSize.height <= hoehe) {
			mainFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
		}
		else {
			mainFrame.setExtendedState(JFrame.NORMAL);
			mainFrame.setBounds((screenSize.width-breite)/2, (screenSize.height-hoehe)/2, breite, hoehe);
		}
		
		// Benutze beim Schließen des Fensters über das Schließen-Kreuz
		// die Aktion, die für den Beenden-Button im Menü benutzt wird.
		getApplication().addExitListener(new Application.ExitListener() {

			public boolean canExit(EventObject arg0) {
				if (!dateiOperationenService.isGespeichert()) {
					speichernSchachtDialog(REACT_ID_SPEICHERN_VOR_BEENDEN);
					return exitErlaubt;
				} else {
					return true;
				} 
			}

			public void willExit(EventObject arg0) {
				// ignorieren
			}
		});
		
		// Weitere Komponenten noch einmal initialisieren
		mainSplitPane.setDividerLocation(580);
		
		// Lade Seilparameter
		seilparameterDatei = SeilparameterUtilities.seilparameterInitialLaden("seilparameter.dat");
		
		// Setzte Fenster-Titel
		mainFrame.setName(resourceMap.getString("Application.title"));
	}
	
	private void initListener() {
		dateiOperationenService.getFoerderschacht().addFoerderschachtListener(new FoerderschachtListener() {
			@Override
			public void eventOccurred(FoerderschachtEvent event) {
				if (event.getID() == FoerderschachtEvent.PARAMETER_GEAENDERT_ID) {
					somethingChanged();
				}
			}
		});
	}

	/**
	 * Zeige die Box mit den Infos über das Programm.
	 */
	private void showAboutBox() {
		aboutBox = new SchachtseileAboutBox(mainFrame);
		aboutBox.setLocationRelativeTo(mainFrame);
		SchachtseileApp.getApplication().show(aboutBox);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();
        zeichnungPanel = new javax.swing.JPanel();
        schachtScrollPane = new javax.swing.JScrollPane();
        schachtPanel = new javax.swing.JPanel();
        ergebnisEingabePanel = new javax.swing.JPanel();
        eingabePanel = new javax.swing.JPanel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jFormattedTextField3 = new javax.swing.JFormattedTextField();
        jFormattedTextField4 = new javax.swing.JFormattedTextField();
        jFormattedTextField5 = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jFormattedTextField6 = new javax.swing.JFormattedTextField();
        buttonPanel = new javax.swing.JPanel();
        lebensdauerButton = new javax.swing.JButton();
        ergebnissePanel = new javax.swing.JPanel();
        ergebnisPanel = new javax.swing.JPanel();
        ergebnisTableScrollPane = new javax.swing.JScrollPane();
        ergebnisTable = new javax.swing.JTable();
        ergebnisKeinePanel = new javax.swing.JPanel();
        ergebnisKeineTableScrollPane = new javax.swing.JScrollPane();
        ergebnisKeineTable = new javax.swing.JTable();
        ergebnisNurTSPanel = new javax.swing.JPanel();
        ergebnisNurTSTableScrollPane = new javax.swing.JScrollPane();
        ergebnisNurTSTable = new javax.swing.JTable();
        ergebnisNurBewegtPanel = new javax.swing.JPanel();
        ergebnisNurBewegtTableScrollPane = new javax.swing.JScrollPane();
        ergebnisNurBewegtTable = new javax.swing.JTable();
        ergebnisAllePanel = new javax.swing.JPanel();
        ergebnisAlleTableScrollPane = new javax.swing.JScrollPane();
        ergebnisAlleTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu dateiMenu = new javax.swing.JMenu();
        neuMenuItem = new javax.swing.JMenuItem();
        oeffnenMenuItem = new javax.swing.JMenuItem();
        speichernAlsMenuItem = new javax.swing.JMenuItem();
        speichernMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        druckenMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        javax.swing.JMenuItem beendenMenuItem = new javax.swing.JMenuItem();
        einstellungMenu = new javax.swing.JMenu();
        seilparameterMenuItem = new javax.swing.JMenuItem();
        schachtparameterMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu infoMenu = new javax.swing.JMenu();
        logMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        mainSplitPane.setDividerLocation(400);
        mainSplitPane.setName("mainSplitPane"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.tbosch.schachtseile.SchachtseileApp.class).getContext().getResourceMap(SchachtseileView.class);
        zeichnungPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("zeichnungPanel.border.title"))); // NOI18N
        zeichnungPanel.setName("zeichnungPanel"); // NOI18N
        zeichnungPanel.setLayout(new java.awt.CardLayout());

        schachtScrollPane.setName("schachtScrollPane"); // NOI18N

        schachtPanel.setName("schachtPanel"); // NOI18N
        schachtPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        schachtScrollPane.setViewportView(schachtPanel);

        zeichnungPanel.add(schachtScrollPane, "card3");

        mainSplitPane.setTopComponent(zeichnungPanel);

        ergebnisEingabePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisEingabePanel.border.title"))); // NOI18N
        ergebnisEingabePanel.setName("ergebnisEingabePanel"); // NOI18N

        eingabePanel.setName("eingabePanel"); // NOI18N
        eingabePanel.setLayout(new java.awt.GridBagLayout());

        jFormattedTextField1.setText(resourceMap.getString("jFormattedTextField1.text")); // NOI18N
        jFormattedTextField1.setEnabled(false);
        jFormattedTextField1.setName("jFormattedTextField1"); // NOI18N
        jFormattedTextField1.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        eingabePanel.add(jFormattedTextField1, gridBagConstraints);

        jFormattedTextField2.setText(resourceMap.getString("jFormattedTextField2.text")); // NOI18N
        jFormattedTextField2.setEnabled(false);
        jFormattedTextField2.setName("jFormattedTextField2"); // NOI18N
        jFormattedTextField2.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        eingabePanel.add(jFormattedTextField2, gridBagConstraints);

        jFormattedTextField3.setText(resourceMap.getString("jFormattedTextField3.text")); // NOI18N
        jFormattedTextField3.setEnabled(false);
        jFormattedTextField3.setName("jFormattedTextField3"); // NOI18N
        jFormattedTextField3.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        eingabePanel.add(jFormattedTextField3, gridBagConstraints);

        jFormattedTextField4.setText(resourceMap.getString("jFormattedTextField4.text")); // NOI18N
        jFormattedTextField4.setEnabled(false);
        jFormattedTextField4.setName("jFormattedTextField4"); // NOI18N
        jFormattedTextField4.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        eingabePanel.add(jFormattedTextField4, gridBagConstraints);

        jFormattedTextField5.setText(resourceMap.getString("jFormattedTextField5.text")); // NOI18N
        jFormattedTextField5.setEnabled(false);
        jFormattedTextField5.setName("jFormattedTextField5"); // NOI18N
        jFormattedTextField5.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        eingabePanel.add(jFormattedTextField5, gridBagConstraints);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel3, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel4, gridBagConstraints);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel5, gridBagConstraints);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel1, gridBagConstraints);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 1);
        eingabePanel.add(jLabel6, gridBagConstraints);

        jFormattedTextField6.setText(resourceMap.getString("jFormattedTextField6.text")); // NOI18N
        jFormattedTextField6.setEnabled(false);
        jFormattedTextField6.setName("jFormattedTextField6"); // NOI18N
        jFormattedTextField6.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        eingabePanel.add(jFormattedTextField6, gridBagConstraints);

        buttonPanel.setName("buttonPanel"); // NOI18N

        lebensdauerButton.setText(resourceMap.getString("lebensdauerButton.text")); // NOI18N
        lebensdauerButton.setEnabled(false);
        lebensdauerButton.setName("lebensdauerButton"); // NOI18N
        lebensdauerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lebensdauerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lebensdauerButton)
                .addContainerGap(242, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lebensdauerButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ergebnissePanel.setName("ergebnissePanel"); // NOI18N
        ergebnissePanel.setLayout(new javax.swing.BoxLayout(ergebnissePanel, javax.swing.BoxLayout.Y_AXIS));

        ergebnisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisPanel.border.title"))); // NOI18N
        ergebnisPanel.setName("ergebnisPanel"); // NOI18N
        ergebnisPanel.setLayout(new javax.swing.BoxLayout(ergebnisPanel, javax.swing.BoxLayout.LINE_AXIS));

        ergebnisTableScrollPane.setName("ergebnisTableScrollPane"); // NOI18N

        ergebnisTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seiltyp", "N A (NSt)", "N A10 (NSt)", "N A (NK)", "N A10 (NK)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ergebnisTable.setName("ergebnisTable"); // NOI18N
        ergebnisTableScrollPane.setViewportView(ergebnisTable);

        ergebnisPanel.add(ergebnisTableScrollPane);

        ergebnissePanel.add(ergebnisPanel);

        ergebnisKeinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisKeinePanel.border.title"))); // NOI18N
        ergebnisKeinePanel.setName("ergebnisKeinePanel"); // NOI18N
        ergebnisKeinePanel.setLayout(new javax.swing.BoxLayout(ergebnisKeinePanel, javax.swing.BoxLayout.LINE_AXIS));

        ergebnisKeineTableScrollPane.setName("ergebnisKeineTableScrollPane"); // NOI18N

        ergebnisKeineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seiltyp", "N A (NSt)", "N A10 (NSt)", "N A (NK)", "N A10 (NK)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ergebnisKeineTable.setName("ergebnisKeineTable"); // NOI18N
        ergebnisKeineTableScrollPane.setViewportView(ergebnisKeineTable);

        ergebnisKeinePanel.add(ergebnisKeineTableScrollPane);

        ergebnissePanel.add(ergebnisKeinePanel);

        ergebnisNurTSPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisNurTSPanel.border.title"))); // NOI18N
        ergebnisNurTSPanel.setName("ergebnisNurTSPanel"); // NOI18N
        ergebnisNurTSPanel.setLayout(new javax.swing.BoxLayout(ergebnisNurTSPanel, javax.swing.BoxLayout.LINE_AXIS));

        ergebnisNurTSTableScrollPane.setName("ergebnisNurTSTableScrollPane"); // NOI18N

        ergebnisNurTSTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seiltyp", "N A (NSt)", "N A10 (NSt)", "N A (NK)", "N A10 (NK)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ergebnisNurTSTable.setName("ergebnisNurTSTable"); // NOI18N
        ergebnisNurTSTableScrollPane.setViewportView(ergebnisNurTSTable);

        ergebnisNurTSPanel.add(ergebnisNurTSTableScrollPane);

        ergebnissePanel.add(ergebnisNurTSPanel);

        ergebnisNurBewegtPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisNurBewegtPanel.border.title"))); // NOI18N
        ergebnisNurBewegtPanel.setName("ergebnisNurBewegtPanel"); // NOI18N
        ergebnisNurBewegtPanel.setLayout(new javax.swing.BoxLayout(ergebnisNurBewegtPanel, javax.swing.BoxLayout.LINE_AXIS));

        ergebnisNurBewegtTableScrollPane.setName("ergebnisNurBewegtTableScrollPane"); // NOI18N

        ergebnisNurBewegtTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seiltyp", "N A (NSt)", "N A10 (NSt)", "N A (NK)", "N A10 (NK)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ergebnisNurBewegtTable.setName("ergebnisNurBewegtTable"); // NOI18N
        ergebnisNurBewegtTableScrollPane.setViewportView(ergebnisNurBewegtTable);

        ergebnisNurBewegtPanel.add(ergebnisNurBewegtTableScrollPane);

        ergebnissePanel.add(ergebnisNurBewegtPanel);

        ergebnisAllePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("ergebnisAllePanel.border.title"))); // NOI18N
        ergebnisAllePanel.setName("ergebnisAllePanel"); // NOI18N
        ergebnisAllePanel.setLayout(new javax.swing.BoxLayout(ergebnisAllePanel, javax.swing.BoxLayout.LINE_AXIS));

        ergebnisAlleTableScrollPane.setName("ergebnisAlleTableScrollPane"); // NOI18N

        ergebnisAlleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seiltyp", "N A (NSt)", "N A10 (NSt)", "N A (NK)", "N A10 (NK)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ergebnisAlleTable.setName("ergebnisAlleTable"); // NOI18N
        ergebnisAlleTableScrollPane.setViewportView(ergebnisAlleTable);

        ergebnisAllePanel.add(ergebnisAlleTableScrollPane);

        ergebnissePanel.add(ergebnisAllePanel);

        javax.swing.GroupLayout ergebnisEingabePanelLayout = new javax.swing.GroupLayout(ergebnisEingabePanel);
        ergebnisEingabePanel.setLayout(ergebnisEingabePanelLayout);
        ergebnisEingabePanelLayout.setHorizontalGroup(
            ergebnisEingabePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ergebnisEingabePanelLayout.createSequentialGroup()
                .addComponent(eingabePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(ergebnisEingabePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ergebnisEingabePanelLayout.createSequentialGroup()
                    .addComponent(ergebnissePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        ergebnisEingabePanelLayout.setVerticalGroup(
            ergebnisEingabePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ergebnisEingabePanelLayout.createSequentialGroup()
                .addComponent(eingabePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(510, Short.MAX_VALUE))
            .addGroup(ergebnisEingabePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ergebnisEingabePanelLayout.createSequentialGroup()
                    .addGap(179, 179, 179)
                    .addComponent(ergebnissePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)))
        );

        mainSplitPane.setRightComponent(ergebnisEingabePanel);

        mainPanel.add(mainSplitPane, java.awt.BorderLayout.CENTER);

        menuBar.setName("menuBar"); // NOI18N

        dateiMenu.setText(resourceMap.getString("dateiMenu.text")); // NOI18N
        dateiMenu.setName("dateiMenu"); // NOI18N

        neuMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        neuMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/filenew.png"))); // NOI18N
        neuMenuItem.setText(resourceMap.getString("neuMenuItem.text")); // NOI18N
        neuMenuItem.setName("neuMenuItem"); // NOI18N
        neuMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neuMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(neuMenuItem);

        oeffnenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        oeffnenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/file.png"))); // NOI18N
        oeffnenMenuItem.setText(resourceMap.getString("oeffnenMenuItem.text")); // NOI18N
        oeffnenMenuItem.setName("oeffnenMenuItem"); // NOI18N
        oeffnenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oeffnenMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(oeffnenMenuItem);

        speichernAlsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/filesaveas.png"))); // NOI18N
        speichernAlsMenuItem.setText(resourceMap.getString("speichernAlsMenuItem.text")); // NOI18N
        speichernAlsMenuItem.setEnabled(false);
        speichernAlsMenuItem.setName("speichernAlsMenuItem"); // NOI18N
        speichernAlsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speichernAlsMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(speichernAlsMenuItem);

        speichernMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        speichernMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/filesave.png"))); // NOI18N
        speichernMenuItem.setText(resourceMap.getString("speichernMenuItem.text")); // NOI18N
        speichernMenuItem.setEnabled(false);
        speichernMenuItem.setName("speichernMenuItem"); // NOI18N
        speichernMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speichernMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(speichernMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        dateiMenu.add(jSeparator1);

        druckenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        druckenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/fileprint.png"))); // NOI18N
        druckenMenuItem.setText(resourceMap.getString("druckenMenuItem.text")); // NOI18N
        druckenMenuItem.setEnabled(false);
        druckenMenuItem.setName("druckenMenuItem"); // NOI18N
        druckenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                druckenMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(druckenMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        dateiMenu.add(jSeparator2);

        beendenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        beendenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/fileclose.png"))); // NOI18N
        beendenMenuItem.setText(resourceMap.getString("beendenMenuItem.text")); // NOI18N
        beendenMenuItem.setName("beendenMenuItem"); // NOI18N
        beendenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beendenMenuItemActionPerformed(evt);
            }
        });
        dateiMenu.add(beendenMenuItem);

        menuBar.add(dateiMenu);

        einstellungMenu.setText(resourceMap.getString("einstellungMenu.text")); // NOI18N
        einstellungMenu.setName("einstellungMenu"); // NOI18N

        seilparameterMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/seile/commons/gui/resources/icons/menu_seil.png"))); // NOI18N
        seilparameterMenuItem.setText(resourceMap.getString("seilparameterMenuItem.text")); // NOI18N
        seilparameterMenuItem.setEnabled(false);
        seilparameterMenuItem.setName("seilparameterMenuItem"); // NOI18N
        seilparameterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seilparameterMenuItemActionPerformed(evt);
            }
        });
        einstellungMenu.add(seilparameterMenuItem);

        schachtparameterMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/seile/commons/gui/resources/icons/menu_global.png"))); // NOI18N
        schachtparameterMenuItem.setText(resourceMap.getString("schachtparameterMenuItem.text")); // NOI18N
        schachtparameterMenuItem.setEnabled(false);
        schachtparameterMenuItem.setName("schachtparameterMenuItem"); // NOI18N
        schachtparameterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schachtparameterMenuItemActionPerformed(evt);
            }
        });
        einstellungMenu.add(schachtparameterMenuItem);

        menuBar.add(einstellungMenu);

        infoMenu.setText(resourceMap.getString("infoMenu.text")); // NOI18N
        infoMenu.setName("infoMenu"); // NOI18N

        logMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/tbosch/commons/gui/resources/icons/logview.png"))); // NOI18N
        logMenuItem.setText(resourceMap.getString("logMenuItem.text")); // NOI18N
        logMenuItem.setName("logMenuItem"); // NOI18N
        logMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logMenuItemActionPerformed(evt);
            }
        });
        infoMenu.add(logMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(de.tbosch.schachtseile.SchachtseileApp.class).getContext().getActionMap(SchachtseileView.class, this);
        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        infoMenu.add(aboutMenuItem);

        menuBar.add(infoMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents
    private void neuMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neuMenuItemActionPerformed
        neu();
    }//GEN-LAST:event_neuMenuItemActionPerformed

    private void speichernMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speichernMenuItemActionPerformed
        speichern();
    }//GEN-LAST:event_speichernMenuItemActionPerformed

	private void oeffnenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oeffnenMenuItemActionPerformed
		oeffnen();
	}//GEN-LAST:event_oeffnenMenuItemActionPerformed

	private void speichernAlsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speichernAlsMenuItemActionPerformed
		speichernAls();
	}//GEN-LAST:event_speichernAlsMenuItemActionPerformed

	private void druckenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_druckenMenuItemActionPerformed
		drucken();
	}//GEN-LAST:event_druckenMenuItemActionPerformed

	private void beendenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beendenMenuItemActionPerformed
		beenden();
	}//GEN-LAST:event_beendenMenuItemActionPerformed

	private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
		showAboutBox();
	}//GEN-LAST:event_aboutMenuItemActionPerformed

	private void lebensdauerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lebensdauerButtonActionPerformed
		berechneLebensdauer();
	}//GEN-LAST:event_lebensdauerButtonActionPerformed

	private void seilparameterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seilparameterMenuItemActionPerformed
		SeilParameterDialog dialog = new SeilParameterDialog(mainFrame, this, seilparameterDatei, true);
		SchachtseileApp.getApplication().show(dialog);
		ergebnisTabelleErstellen();
		somethingChanged();
	}//GEN-LAST:event_seilparameterMenuItemActionPerformed

	private void logMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logMenuItemActionPerformed
		LogViewDialog dialog = new LogViewDialog(mainFrame, "log/log4j.log");
		SchachtseileApp.getApplication().show(dialog);
	}//GEN-LAST:event_logMenuItemActionPerformed

	private void schachtparameterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schachtparameterMenuItemActionPerformed
		showSchachtparameterDialog();
}//GEN-LAST:event_schachtparameterMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JPanel buttonPanel;
    javax.swing.JMenuItem druckenMenuItem;
    javax.swing.JPanel eingabePanel;
    javax.swing.JMenu einstellungMenu;
    javax.swing.JPanel ergebnisAllePanel;
    javax.swing.JTable ergebnisAlleTable;
    javax.swing.JScrollPane ergebnisAlleTableScrollPane;
    javax.swing.JPanel ergebnisEingabePanel;
    javax.swing.JPanel ergebnisKeinePanel;
    javax.swing.JTable ergebnisKeineTable;
    javax.swing.JScrollPane ergebnisKeineTableScrollPane;
    javax.swing.JPanel ergebnisNurBewegtPanel;
    javax.swing.JTable ergebnisNurBewegtTable;
    javax.swing.JScrollPane ergebnisNurBewegtTableScrollPane;
    javax.swing.JPanel ergebnisNurTSPanel;
    javax.swing.JTable ergebnisNurTSTable;
    javax.swing.JScrollPane ergebnisNurTSTableScrollPane;
    javax.swing.JPanel ergebnisPanel;
    javax.swing.JTable ergebnisTable;
    javax.swing.JScrollPane ergebnisTableScrollPane;
    javax.swing.JPanel ergebnissePanel;
    javax.swing.JFormattedTextField jFormattedTextField1;
    javax.swing.JFormattedTextField jFormattedTextField2;
    javax.swing.JFormattedTextField jFormattedTextField3;
    javax.swing.JFormattedTextField jFormattedTextField4;
    javax.swing.JFormattedTextField jFormattedTextField5;
    javax.swing.JFormattedTextField jFormattedTextField6;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JSeparator jSeparator1;
    javax.swing.JSeparator jSeparator2;
    javax.swing.JButton lebensdauerButton;
    javax.swing.JMenuItem logMenuItem;
    javax.swing.JPanel mainPanel;
    javax.swing.JSplitPane mainSplitPane;
    javax.swing.JMenuBar menuBar;
    javax.swing.JMenuItem neuMenuItem;
    javax.swing.JMenuItem oeffnenMenuItem;
    javax.swing.JPanel schachtPanel;
    javax.swing.JScrollPane schachtScrollPane;
    javax.swing.JMenuItem schachtparameterMenuItem;
    javax.swing.JMenuItem seilparameterMenuItem;
    javax.swing.JMenuItem speichernAlsMenuItem;
    javax.swing.JMenuItem speichernMenuItem;
    javax.swing.JPanel zeichnungPanel;
    // End of variables declaration//GEN-END:variables
	/**
	 * Diese Methode wird von Dialogen zur Reaktion auf deren Eingaben aufgerufen.
	 * In diesem Fall ist es die positive Reaktion.
	 * Statt eines Dialoges kann es aber auch jede andere <b>Component</b> sein
	 * 
	 * @param child Die aufrufende Komponente
	 */
	public void okClicked(Component child) {
		if (child.getName().equals(REACT_ID_SPEICHERN_VOR_NEU) 
			|| child.getName().equals(REACT_ID_SPEICHERN_VOR_OEFFNEN)) {
			speichern();
		}
		else if (child.getName().equals(REACT_ID_SPEICHERN_VOR_BEENDEN)) {
			exitErlaubt = speichern();
		} 
		else {
			logger.warn("Reaction-ID '" + child.getName() + "' nicht abgefangen.");
		}
	}

	/**
	 * Diese Methode wird von Dialogen zur Reaktion auf deren Eingaben aufgerufen.
	 * In diesem Fall ist es die negative Reaktion.
	 * Statt eines Dialoges kann es aber auch jede andere <b>Component</b> sein
	 * 
	 * @param child Die aufrufende Komponente
	 */
	public void noClicked(Component child) {
		if (child.getName().equals(REACT_ID_SPEICHERN_VOR_NEU)) {
			neuerSchachtDialog();
		} 
		else if (child.getName().equals(REACT_ID_SPEICHERN_VOR_BEENDEN)) {
			logger.info("Beende Programm ohne die geänderte Datei zu speichern.");
			exitErlaubt = true;
		} 
		else if (child.getName().equals(REACT_ID_SPEICHERN_VOR_OEFFNEN)) {
			logger.info("Öfne neue Datei ohne die geänderte Datei zu speichern.");
			oeffneSchachtDatei();
		} 
		else {
			logger.warn("Reaction-ID '" + child.getName() + "' nicht abgefangen.");
		}
	}

	/**
	 * Dummy
	 * @param enabled
	 */
	public void setEnabled(boolean enabled) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	/**
	 * Die Methode speichert die Datei.
	 * 
	 * @return true, wenn das Speichern erfolgreich war.
	 */
	private boolean speichern() {
		boolean gespeichert = dateiOperationenService.speichern();
		if (gespeichert) {
			// setzte den Dateinamen in den Titel der Anwendung.
			mainFrame.setTitle(mainFrame.getName() + " - " + dateiOperationenService.getSchachtdatei().getName());
			return true;
		}
		else {
			return false;
		}
	}
	
	/**
	 * Nach dem Speichern-Als Button-Drücker aufgerufen
	 */
	private void speichernAls() {
		boolean gespeichert = dateiOperationenService.speichernAls();
		if (gespeichert) {
			// setzte den Dateinamen in den Titel der Anwendung.
			mainFrame.setTitle(mainFrame.getName() + " - " + dateiOperationenService.getSchachtdatei().getName());
		}
	}

	/**
	 * Öffnen eine Datei.
	 */
	private void oeffnen() {
		if (!dateiOperationenService.isGespeichert()) {
			speichernSchachtDialog(REACT_ID_SPEICHERN_VOR_OEFFNEN);
		} else {
			oeffneSchachtDatei();
		}
	}
	
	/**
	 * Öffnet entgültig die Datei
	 */
	private void oeffneSchachtDatei() {
		boolean geoeffnet = dateiOperationenService.oeffnenVon();
		if (geoeffnet) {
			// Erstelle Ergebnis Tabelle
			ergebnisTabelleErstellen();

			// Setze den Förderschacht in die ScrollView
			schachtScrollPane.setViewportView(dateiOperationenService.getFoerderschacht());

			// Fentertitel setzen
			mainFrame.setTitle(mainFrame.getName() + " - " + dateiOperationenService.getSchachtdatei().getName());

			// Aktiviere Menüeinträge
			aktiviereMenueEintraege();

			// initaliesere FoerderschachtListener
			initListener();

			// falls Berechnung ausgeführt wurde, führe sie wieder aus;
			berechneLebensdauer();
		}
	}

	/**
	 * Erstellt eine neue Datei.
	 */
	private void neu() {
		if (!dateiOperationenService.isGespeichert()) {
			speichernSchachtDialog(REACT_ID_SPEICHERN_VOR_NEU);
		} else {
			neuerSchachtDialog();
		}
	}

	/**
	 * Druckt die Datei.
	 */
	private void drucken() {
		throw new UnsupportedOperationException("Not yet implemented");
	}

	/**
	 * Beendet das Programm. 
	 * Eine eventuell nötige Speicherung wird vorgenommen.
	 */
	private void beenden() {
		getApplication().exit();
	}
	
	private void showSchachtparameterDialog() {
		SchachtparamterDialog schachtparamterDialog = new SchachtparamterDialog(mainFrame, true , this);
		schachtparamterDialog.setParamters(dateiOperationenService.getFoerderschacht().getDoubleParameters(), dateiOperationenService.getFoerderschacht().getSeil().getL());
		SchachtseileApp.getApplication().show(schachtparamterDialog);
	}
	
	/** 
	 * Berechnet die Lebensdauer der gegebenen Anlage
	 */
	private void berechneLebensdauer()  {
		if (dateiOperationenService.getBerechnung() != null) {
			long[][][][] erg = new long[5][][][];
			
			Summenobjekt[][] summenArrayNurAufTSGrob = {{Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M,
									Summenobjekt.F_M, Summenobjekt.F_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M},
									{Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q, Summenobjekt.Q,
									Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q, Summenobjekt.Q}};
			
			Summenobjekt[][] summenArrayKeine = {{Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M,
									Summenobjekt.F_M, Summenobjekt.F_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M},
									{Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL,
									Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL}};
		
			Summenobjekt[][] summenArrayNurAufTS = {{Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M,
									Summenobjekt.F_M, Summenobjekt.F_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M},
									{Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q,
									Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q}};
		
			Summenobjekt[][] summenArrayNurBewegt = {{Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M,
									Summenobjekt.F_M, Summenobjekt.F_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M},
									{Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q_M,
									Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.M, Summenobjekt.Q}};
			
			Summenobjekt[][] summenArrayAlle = {{Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M,
									Summenobjekt.F_M, Summenobjekt.F_M, Summenobjekt.F_Q_M, Summenobjekt.F_Q_M},
									{Summenobjekt.Q, Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q_M,
									Summenobjekt.NULL, Summenobjekt.NULL, Summenobjekt.Q_M, Summenobjekt.Q}};
			
			erg[0] = dateiOperationenService.getBerechnung().calculate(summenArrayNurAufTSGrob);
			erg[1] = dateiOperationenService.getBerechnung().calculate(summenArrayKeine);
			erg[2] = dateiOperationenService.getBerechnung().calculate(summenArrayNurAufTS);
			erg[3] = dateiOperationenService.getBerechnung().calculate(summenArrayNurBewegt);
			erg[4] = dateiOperationenService.getBerechnung().calculate(summenArrayAlle);
			
			fuelleErgebnisTabellenWerte(erg);
		}
	}

	/**
	 * Öffnet einen neuen Dialog zur Auswahl eines neuen Schachtes.
	 */
	private void neuerSchachtDialog() {
		neuDialog = new KonstruktionDialog(mainFrame, true, this);
		neuDialog.setLocationRelativeTo(mainFrame);
		SchachtseileApp.getApplication().show(neuDialog);
	}

	/**
	 * Öffnet einen neuen Dialog zur Abfrage der Speicherung der
	 * aktuellen Datei.
	 * 
	 * @param id Eine übergebene Kennung. Anhand dieser Kennung wird bei
	 * <b>okClicked()</b> und <b>noClicked()</b> die Reaktion durchgeführt.
	 */
	private void speichernSchachtDialog(String id) {
		speichernDialog = new QuestionDialog(mainFrame, true, this, resourceMap.getString("speichern.text"), id);
		speichernDialog.setLocationRelativeTo(mainFrame);
		SchachtseileApp.getApplication().show(speichernDialog);
	}

	/**
	 * Erstellt einen neuen Schacht im Schacht Panel.
	 * 
	 * @param typ Der Typ des Schachtes.
	 */
	public void neuerSchacht(String typ) {
		Foerderschacht foerderschacht = new Foerderschacht(typ);
		
		// Setzte in DateiOperationenService
		dateiOperationenService.setFoerderschacht(foerderschacht);

		schachtScrollPane.setViewportView(foerderschacht);
		foerderschacht.addEingabeLabels();
		logger.info("Neuen Schacht erstellt.");
		Seil seil = foerderschacht.getFoerderschachtModel().getSeil();
		Seil unterseil = foerderschacht.getFoerderschachtModel().getUnterseil();
		Kapsel kapsel1 = foerderschacht.getFoerderschachtModel().getKapsel1();
		Kapsel kapsel2 = foerderschacht.getFoerderschachtModel().getKapsel2();
		int nt = 1; // Aufängung immer 1:1
		double toleranz = 1;
		double fn1 = foerderschacht.getFoerderschachtModel().getDoubleFaktoren().get(CommonConstants.PARAMETER_NAME_FN1);
		double fs1 = foerderschacht.getFoerderschachtModel().getDoubleFaktoren().get(CommonConstants.PARAMETER_NAME_FS1);
		double fs3 = foerderschacht.getFoerderschachtModel().getDoubleFaktoren().get(CommonConstants.PARAMETER_NAME_FS3);
		double fs4 = foerderschacht.getFoerderschachtModel().getDoubleFaktoren().get(CommonConstants.PARAMETER_NAME_FS4);
		double fs5 = foerderschacht.getFoerderschachtModel().getDoubleFaktoren().get(CommonConstants.PARAMETER_NAME_FS5);
		double[] nb = {};
		
		Berechnung berechnung = new Berechnung(seil, unterseil, kapsel1, kapsel2, nt, toleranz, fn1, fs1, fs3, fs4, fs5, nb);
		
		// Setzte in DateiOperationenService
		dateiOperationenService.setBerechnung(berechnung);
		logger.info("Neue Berechnung erstellt.");
		
		// Setzte initiale Parameter
		dateiOperationenService.getBerechnung().setIntParameters(foerderschacht.getIntParameters());
		
		// setzte den Dateinamen in den Titel der Anwendung.
		mainFrame.setTitle(mainFrame.getName());
		
		// Erstelle die Ergebnistabelle
		ergebnisTabelleErstellen();
		
		// Aktiviere Menüeinträge
		aktiviereMenueEintraege();
		
		// Initialisiere Listener
		initListener();
	}
	
	private void aktiviereMenueEintraege() {
		speichernMenuItem.setEnabled(true);
		speichernAlsMenuItem.setEnabled(true);
		druckenMenuItem.setEnabled(true);
		seilparameterMenuItem.setEnabled(true);
		schachtparameterMenuItem.setEnabled(true);
		lebensdauerButton.setEnabled(true);
	}
	
	private void ergebnisTabelleErstellen() {
		tabelleErstellen(ergebnisTable, ergebnisTableScrollPane);
		tabelleErstellen(ergebnisKeineTable, ergebnisKeineTableScrollPane);
		tabelleErstellen(ergebnisNurTSTable, ergebnisNurTSTableScrollPane);
		tabelleErstellen(ergebnisNurBewegtTable, ergebnisNurBewegtTableScrollPane);
		tabelleErstellen(ergebnisAlleTable, ergebnisAlleTableScrollPane);
	}
	
	private void fuelleErgebnisTabellenWerte(long ergArray[][][][]) {
		// fill with solution array
		for (int ergebnisse = 0; ergebnisse < ergArray.length; ergebnisse++) {
			for (int j = 0; j < ergArray[ergebnisse].length; j++) {
				for (int i = 0; i < ergArray[ergebnisse][j].length; i++) {
					long ergebnis = ergArray[ergebnisse][j][i][0];
					long ergebnisNK = ergArray[ergebnisse][j][i][1];
					JTable tabelle = null;
					if (ergebnisse == 0) {
						tabelle = ergebnisTable;
					}
					else if (ergebnisse == 1) {
						tabelle = ergebnisKeineTable;
					}
					else if (ergebnisse == 2) {
						tabelle = ergebnisNurTSTable;
					}
					else if (ergebnisse == 3) {
						tabelle = ergebnisNurBewegtTable;
					}
					else if (ergebnisse == 4) {
						tabelle = ergebnisAlleTable;
					}
					tabelle.setValueAt(new LongGrouping(ergebnis, true), i, j+1);
					tabelle.setValueAt(new LongGrouping(ergebnisNK, true), i, j+3);	
				}
			}	
		}
	}
	
	private void resetErgebnisTabelle(JTable tabelle) {
		DefaultTableModel ergebnisTableModel = (DefaultTableModel)tabelle.getModel();
		for (int i = ergebnisTableModel.getRowCount() - 1; i >= 0; i--) {
			// reset ergebnis table
			ergebnisTableModel.removeRow(i);
		}
	}

	public void somethingChanged() {
		dateiOperationenService.getBerechnung().setIntParameters(dateiOperationenService.getFoerderschacht().getIntParameters());
		berechneLebensdauer();
	}

	public DateiOperationenService getDateiOperationenService() {
		return dateiOperationenService;
	}

	private void tabelleErstellen(JTable tabelle, JScrollPane scrollpane) {
		TableModel parameterTableModel = SeilparameterUtilities.seilparameterParseDatei(seilparameterDatei);

		// reset Ergebnis Tabelle, lösche Zeilen
		resetErgebnisTabelle(tabelle);
		DefaultTableModel ergebnisTableModel = (DefaultTableModel) tabelle.getModel();

		// reset the calculation
		dateiOperationenService.getBerechnung().resetBsFn2MassFestigkeit();

		// read all values from the parameter table an set the calculation array in the calculation
		for (int i = 0; i < parameterTableModel.getRowCount(); i++) {
			if ((Boolean) parameterTableModel.getValueAt(i, 0) != null && (Boolean) parameterTableModel.getValueAt(i, 0) == true) {
				if (parameterTableModel.getValueAt(i, 1) != null && parameterTableModel.getValueAt(i, 2) != null && parameterTableModel.getValueAt(i, 3) != null && parameterTableModel.getValueAt(i, 4) != null && parameterTableModel.getValueAt(i, 5) != null && parameterTableModel.getValueAt(i, 6) != null && parameterTableModel.getValueAt(i, 7) != null && parameterTableModel.getValueAt(i, 8) != null && parameterTableModel.getValueAt(i, 9) != null && parameterTableModel.getValueAt(i, 10) != null && parameterTableModel.getValueAt(i, 11) != null && parameterTableModel.getValueAt(i, 12) != null && parameterTableModel.getValueAt(i, 13) != null && parameterTableModel.getValueAt(i, 14) != null) {
					double[] bsFn2MassFestigkeit = new double[13];
					for (int j = 2; j < parameterTableModel.getColumnCount(); j++) {
						bsFn2MassFestigkeit[j - 2] = (Double) parameterTableModel.getValueAt(i, j);
					}
					dateiOperationenService.getBerechnung().addBsFn2MassFestigkeit(bsFn2MassFestigkeit);

					// Setze die Seilmasse initial auf das Hauptseil
					// index 9 = Masse in kg/100m/mm
					double masse = bsFn2MassFestigkeit[9] * dateiOperationenService.getFoerderschacht().getSeil().getD() / 100;
					dateiOperationenService.getFoerderschacht().getSeil().setMassPerM(masse);
					dateiOperationenService.getFoerderschacht().setEingabeLabelWert(EingabeFormattedTextField.EINGABE_PARAMETER_S_M, masse);

					Vector<Object> rowVector = new Vector<Object>();
					rowVector.add(parameterTableModel.getValueAt(i, 1));
					rowVector.add("");
					rowVector.add("");
					ergebnisTableModel.addRow(rowVector);
				} else {
					logger.warn("Partly chooing empty rows. Ignoring those rows."); //$NON-NLS-1$
				}
			}
		}

		tabelle = new // sets attributes of the table
		JTable() {

			Class[] classes = new Class[]{String.class, LongGrouping.class, LongGrouping.class, LongGrouping.class, LongGrouping.class};

			@Override
			public Class<?> getColumnClass(int arg0) {
				return classes[arg0];
			}
		};
		tabelle.setModel(ergebnisTableModel);
		tabelle.getTableHeader().setReorderingAllowed(false);
		tabelle.setRowSelectionAllowed(false);
		for (int i = 0; i < tabelle.getColumnCount(); i++) {
			tabelle.getColumnModel().getColumn(i).setPreferredWidth(90);
		}
		tabelle.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		scrollpane.setViewportView(tabelle);
	}
	
}
